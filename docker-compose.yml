version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: your_db_name
      POSTGRES_USER: your_db_user
      POSTGRES_PASSWORD: your_db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: app
      RABBITMQ_DEFAULT_PASS: app
      RABBITMQ_DEFAULT_VHOST: app
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # API
      - "9001:9001" # Web UI
    volumes:
      - minio_data:/data
    healthcheck:
      # MinIO exposes a native readiness endpoint
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 30

  mc:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set localminio http://minio:9000 minioadmin minioadmin &&
      mc mb localminio/real-estate-bucket || true &&
      tail -f /dev/null
      "

  back:
    container_name: back
    build:
      context: ./back
    command: python /app/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./back/app:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      - DATABASE_NAME=your_db_name
      - DATABASE_USER=your_db_user
      - DATABASE_PASSWORD=your_db_password
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=real-estate-bucket
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_REGION_NAME=us-east-1
      - CELERY_BROKER_URL=amqp://app:app@rabbitmq:5672/app
      - CELERY_RESULT_BACKEND=
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery:
    container_name: celery
    build:
      context: ./back
    command: celery -A config.celery worker -l info
    volumes:
      - ./back/app:/app
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=amqp://app:app@rabbitmq:5672/app
      - CELERY_RESULT_BACKEND=
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  celery-beat:
    container_name: celery-beat
    build:
      context: ./back
    command: celery -A config.celery beat -l info
    volumes:
      - ./back/app:/app
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=amqp://app:app@rabbitmq:5672/app
      - CELERY_RESULT_BACKEND=
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3000:80"
    depends_on:
      back:
        condition: service_started

volumes:
  postgres_data:
  minio_data:
